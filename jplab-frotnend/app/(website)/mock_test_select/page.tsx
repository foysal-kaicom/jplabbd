"use client";
import { Metadata } from "next";

import BreadCrumb from "@/components/BreadCrumb";
import HeadLine2 from "@/components/HeadLine2";
import WebpageWrapper from "@/components/wrapper/WebpageWrapper";
import SuspenseLoader from "@/components/SuspenseLoader";
import axios from "@/utils/axios";

import Image from "next/image";
import { Suspense, use, useEffect, useState } from "react";
import Link from "next/link";
import { toast } from "sonner";
import Loader from "@/components/Loader";

// export const metadata: Metadata = {
//   title: "Select Mock Test",
//   description: "Generated by create next app",
// };

interface Exam {
  id: number;
  slug: string;
  short_name: string;
  title: string;
  fee: string;
  description: string;
  exam_date?: string;
  start_time?: string;
  end_time?: string;
  application_deadline?: string;
  result_publish_date?: string;
  available_to_apply?: string;
}


export default function MockTestSelect() {
  const breadCrumbData = [
    { name: "Home", to: "/" },
    { name: "Select Mock test", to: "/mock_test_select" },
  ];
  const [loader, setLoader] = useState(false);

  const [mockTests, setMockTests] = useState<Exam[]>([]);
  const getMockTestsData = async () => {
    setLoader(true);
    try {
      const response = await axios.get<{ success: boolean; data: Exam[] }>(
        `${process.env.NEXT_PUBLIC_API_BASE_URL}/exam/list`
      );
      if (response?.data?.success) {
        setLoader(false);
        setMockTests(response.data.data);
      }
    } catch (error: any) {
      setLoader(false);
      toast.error(
        error?.response?.data?.message ||
          "Can not get exams at this moment"
      );
    }
    setLoader(false);
  };

  useEffect(() => {
    getMockTestsData();
  }, []);
  let overlayColor = "from-blue-500/20 to-indigo-500/10";
  let buttonColor = "from-blue-500 to-indigo-600";
  let iconColor = "bg-blue-500";
  const mockTest = [
    {
      id: 1,
      level: "Test for N5",
      description:
        "Beginner level. Focus on basic grammar, vocabulary, and kanji.",
      icon: "ðŸ…½5",
      iconColor: "bg-blue-500",
      overlayColor: "from-blue-500/20 to-indigo-500/10",
      buttonColor: "from-blue-500 to-indigo-600",
    },
    {
      id: 2,
      level: "Test for N4",
      description:
        "Upper beginner. Requires understanding of daily conversation and texts.",
      icon: " ðŸ…½4",
      iconColor: "bg-green-500",
      overlayColor: "from-green-500/20 to-emerald-500/10",
      buttonColor: "from-green-500 to-emerald-600",
    },
    {
      id: 3,
      level: "Mix test (N4 + N5)",
      description:
        "Upper beginner. Requires understanding of daily conversation and texts.",
      icon: " ðŸŽŒ",
      iconColor: "bg-purple-500",
      overlayColor: "from-purple-500/20 to-pink-500/10",
      buttonColor: "from-purple-500 to-pink-600",
    },
  ];

  return (
    <>
    {loader && <Loader />}
      <Suspense fallback={<SuspenseLoader />}>
        <div className="space-y-15 pb-15 pt-5 relative overflow-clip">
          <div className="relative z-10">
            <WebpageWrapper>
              <BreadCrumb breadCrumbData={breadCrumbData} />
              <div className="md:w-2/3 xl:w-1/2 mt-10">
                <HeadLine2
                  preText="Test Your progress"
                  mainText="Select mock test"
                  subText=""
                />
              </div>
              <div className="mt-16">
                <div className="grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-3 gap-5 sm:gap-10">
                  {mockTests && mockTests.map((test, key) => (
                    <div
                      key={test.id}
                      className="relative group rounded-xl bg-white/70 backdrop-blur-lg shadow-md overflow-hidden p-8 transition-transform duration-300 hover:-translate-y-2 hover:shadow-lg"
                    >
                      <div
                        className={`absolute inset-0 bg-gradient-to-tr opacity-60 group-hover:opacity-80 transition-opacity ${overlayColor}`}
                      ></div>
                      <div className="relative z-10 text-center">
                        <div
                          className={`w-16 h-16 mx-auto mb-4 rounded-2xl flex items-center justify-center text-white text-3xl shadow-lg ${iconColor}`}
                        >
                          {test.short_name}
                        </div>
                        <h2 className="text-2xl font-bold text-gray-900 mb-2">
                          {test.title}
                        </h2>
                        <p className="text-gray-700 text-sm mb-6">
                          {test.description}
                        </p>
                        <Link
                          href={`/mock_test_select/${test.id}`}
                          className={`px-6 py-2 rounded-xl text-sm font-semibold bg-gradient-to-r text-white shadow hover:opacity-90 transition ${buttonColor}`}
                        >
                          Choose Test
                        </Link>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </WebpageWrapper>
          </div>
          <Image
            src="/assets/img/overlay-5.png"
            width={612}
            height={408}
            alt=""
            className="absolute bottom-1/2 -left-30 size-56"
          />
          <Image
            src="/assets/img/overlay-9.png"
            width={612}
            height={408}
            alt=""
            className="absolute bottom-0 -right-40 size-86 opacity-35"
          />
        </div>
      </Suspense>
    </>
  );
}
