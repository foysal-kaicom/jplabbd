import HeadLine2 from "@/components/HeadLine2";
import WebpageWrapper from "@/components/wrapper/WebpageWrapper";
import BreadCrumb from "@/components/BreadCrumb";
import ExamCard from "@/components/ExamCard";

import Image from "next/image";
import axios from "axios";
import { Suspense } from "react";
import SuspenseLoader from "@/components/SuspenseLoader";

// Metadata
export const metadata = {
  title: "Test Date in Bangladesh",
  description: "Generated by create next app",
};

interface ExamItem {
  title: string;
  description: string;
  exam_date: string;
  application_deadline: string;
  image: string;
  result_publish_date: string;
  slug: string;
  start_time: string;
  end_time: string;
  fee: string;
  available_to_apply: boolean;
}

interface CategorizedExams {
  upcoming: ExamItem[];
  ongoing: ExamItem[];
  passed: ExamItem[];
}

function parseDate(dateStr: string, timeStr = "00:00"): Date {
  const monthMap: Record<string, string> = {
    Jan: "01",
    Feb: "02",
    Mar: "03",
    Apr: "04",
    May: "05",
    Jun: "06",
    Jul: "07",
    Aug: "08",
    Sep: "09",
    Oct: "10",
    Nov: "11",
    Dec: "12",
  };

  const [day, monthAbbr, year] = dateStr.split("-");
  const month = monthMap[monthAbbr];
  if (!month) return new Date(NaN);

  const convert12To24 = (time12h: string) => {
    const [time, modifier] = time12h.split(" ");
    let [hours, minutes] = time.split(":").map(Number);
    if (modifier === "PM" && hours < 12) hours += 12;
    if (modifier === "AM" && hours === 12) hours = 0;
    return `${hours.toString().padStart(2, "0")}:${minutes
      .toString()
      .padStart(2, "0")}`;
  };

  const time24 = convert12To24(timeStr);

  return new Date(`${year}-${month}-${day}T${time24}:00+06:00`);
}

async function getExamData(): Promise<CategorizedExams> {
  try {
    const response = await axios.get(
      `${process.env.NEXT_PUBLIC_API_BASE_URL}/exam/list`
    );
    const allExams: ExamItem[] = response.data.data || [];

    const now = new Date();
    const upcoming: ExamItem[] = [];
    const ongoing: ExamItem[] = [];
    const passed: ExamItem[] = [];

allExams.forEach((exam) => {
  const deadline = parseDate(exam.application_deadline); // use deadline instead of exam date
  // const start = parseDate(exam.exam_date, exam.start_time);

  if (now < deadline) {
    upcoming.push(exam);
  } else {
    passed.push(exam);
  }
});


    return { upcoming, ongoing, passed };
  } catch (error) {
    console.error("❌ Failed to fetch exam data:", error);
    return { upcoming: [], ongoing: [], passed: [] };
  }
}

export default async function TestDate() {
  const { upcoming, ongoing, passed } = await getExamData();

  console.log(upcoming);

  const breadCrumbData = [
    { name: "Home", to: "/" },
    { name: "Test Date in Bangladesh", to: "/test_date_in_bangladesh" },
  ];

  return (
    <Suspense fallback={<SuspenseLoader />}>
      <div className="space-y-15 pb-15 pt-5 bg-sky-50/50 relative overflow-clip">
        <div className="relative z-10">
          <WebpageWrapper>
            <BreadCrumb breadCrumbData={breadCrumbData} />
            <div className="w-1/2 mt-5">
              <HeadLine2
                preText=""
                subText="In Bangladesh"
                mainText="Test Date"
              />
            </div>

            {/* Ongoing Exams */}
            {/* {ongoing.length > 0 && (
              <>
                <h2 className="text-2xl font-semibold text-emerald-600 mt-10 mb-1">
                  Ongoing Exams
                </h2>
                <hr className="w-10 bg-emerald-600 text-emerald-600 p-[1px] mb-5" />
                <div className="grid md:grid-cols-2 xl:grid-cols-3 gap-5">
                  {ongoing.map((e, i) => (
                    <ExamCard exam={e} key={`ongoing-${i}`} index={i} />
                  ))}
                </div>
              </>
            )} */}

            {/* Upcoming Exams */}
            {upcoming.length > 0 && (
              <>
                <h2 className="text-2xl font-semibold text-blue-500 mt-10 mb-1">
                  Available Exams
                </h2>
                <hr className="w-10 bg-blue-500 text-blue-500 p-[1px] mb-5" />
                <div className="grid md:grid-cols-2 xl:grid-cols-3 gap-5">
                  {upcoming.map((e, i) => (
                    <ExamCard exam={e} key={`upcoming-${i}`} index={i} />
                  ))}
                </div>
              </>
            )}

            {/* Passed Exams */}
            {passed.length > 0 && (
              <>
                <h2 className="text-2xl font-semibold text-red-500 mt-10 mb-1">
                  Recent Exams
                </h2>
                <hr className="w-10 bg-red-500 text-red-500 p-[1px] mb-5" />
                <div className="grid md:grid-cols-2 xl:grid-cols-3 gap-5">
                  {passed.map((e, i) => (
                    <ExamCard exam={e} key={`passed-${i}`} index={i} />
                  ))}
                </div>
              </>
            )}
          </WebpageWrapper>
        </div>

        <Image
          src="/assets/img/overlay-6.png"
          width={612}
          height={408}
          alt=""
          className="absolute -top-20 left-150 size-36"
        />

        <Image
          src="/assets/img/overlay-10.png"
          width={612}
          height={408}
          alt=""
          className="absolute top-0 right-0 size-20"
          // style={{ animationDelay: "0.5s" }}
        />

        {/* <Image
        src="/assets/img/overlay-4.png"
        width={612}
        height={408}
        alt=""
        className="absolute top-150 left-130 size-20"
      /> */}

        <Image
          src="/assets/img/overlay-8.png"
          width={612}
          height={408}
          alt=""
          className="absolute left-0 top-1/5 -translate-1/2 rotate-45 size-9"
        />
        <Image
          src="/assets/img/overlay-4.png"
          width={612}
          height={408}
          alt=""
          className="absolute right-0 top-1/3 -translate-1/2 rotate-45 size-9"
        />
        <Image
          src="/assets/img/overlay-5.png"
          width={612}
          height={408}
          alt=""
          className="absolute top-1/2 -left-30 size-56"
        />
        <Image
          src="/assets/img/overlay-9.png"
          width={612}
          height={408}
          alt=""
          className="absolute bottom-10 -right-40 size-76 opacity-35"
        />
      </div>
    </Suspense>
  );
}
